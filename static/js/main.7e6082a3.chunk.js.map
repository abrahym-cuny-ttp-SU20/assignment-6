{"version":3,"sources":["logo.svg","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","state","firstName","lastName","tempFirst","tempLast","isClicked","handleEdit","bind","handleCancel","handleChange","handleSave","e","this","setState","target","name","value","type","defaultValue","onChange","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,kJCiFtBC,E,kDA7EjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVC,WAAW,GAEb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAZL,E,uDAeJI,GACTC,KAAKC,SAAS,CACZZ,UAAWW,KAAKZ,MAAMG,UACtBD,SAAUU,KAAKZ,MAAMI,SACrBC,WAAW,M,iCAIJM,GACTC,KAAKC,SAAS,CACZR,WAAW,M,mCAIFM,GACXC,KAAKC,SAAS,CACZR,WAAW,M,mCAIFM,GACXC,KAAKC,SAAL,eACGF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,+BAKpB,IAAD,OACP,OAAOJ,KAAKZ,MAAMK,UAChB,6BACE,6BACE,2BACEY,KAAK,OACLF,KAAK,YACLG,aAAcN,KAAKZ,MAAMC,UACzBkB,SAAU,SAACR,GAAD,OAAO,EAAKF,aAAaE,OAGvC,6BACE,2BACEM,KAAK,OACLF,KAAK,WACLG,aAAcN,KAAKZ,MAAME,SACzBiB,SAAU,SAACR,GAAD,OAAO,EAAKF,aAAaE,OAIvC,4BAAQS,QAASR,KAAKJ,cAAtB,UACA,4BAAQY,QAASR,KAAKF,YAAtB,SAEF,6BACE,6BACE,0CAAgBE,KAAKZ,MAAMC,YAE7B,6BACE,yCAAeW,KAAKZ,MAAME,WAG5B,4BAAQkB,QAASR,KAAKN,YAAtB,a,GA1EKe,a,MCUJC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e6082a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\n//import './Form.css';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            tempFirst: \"\",\n            tempLast: \"\",\n            isClicked: false,\n          };\n          this.handleEdit = this.handleEdit.bind(this);\n          this.handleCancel = this.handleCancel.bind(this);\n          this.handleChange = this.handleChange.bind(this);\n          this.handleSave = this.handleSave.bind(this);\n        }  \n\n        handleSave(e){\n          this.setState({\n            firstName: this.state.tempFirst,\n            lastName: this.state.tempLast,\n            isClicked: false,\n          });\n        }\n\n        handleEdit(e) {\n          this.setState({\n            isClicked: true,\n          });\n        }    \n\n        handleCancel(e) {\n          this.setState({\n            isClicked: false,\n          }); \n        }\n\n        handleChange(e) {\n          this.setState({\n            [e.target.name]: e.target.value,\n          });\n        }\n\n\n        render() {\n          return this.state.isClicked ? \n            <div>\n              <div>\n                <input \n                  type=\"text\" \n                  name=\"tempFirst\"\n                  defaultValue={this.state.firstName} \n                  onChange={(e) => this.handleChange(e)}>\n                </input>\n              </div> \n              <div>\n                <input \n                  type=\"text\" \n                  name=\"tempLast\"\n                  defaultValue={this.state.lastName} \n                  onChange={(e) => this.handleChange(e)}>\n                </input>\n              </div>\n\n              <button onClick={this.handleCancel}>Cancel</button>\n              <button onClick={this.handleSave}>Save</button>\n            </div> :\n            <div>\n              <div>\n                <p> Firstname: {this.state.firstName}</p>\n              </div>\n              <div>\n                <p> Lastname: {this.state.lastName}</p>\n              </div>\n\n              <button onClick={this.handleEdit}>Edit</button>\n            </div>\n        }\n      }\n      export default Form;","import React from 'react';\nimport logo from './logo.svg';\nimport Form from './Form';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}